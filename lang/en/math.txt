# eval
eval.aliases = [ev]
eval.desc = Evaluate complex arithmetic expressions.\
Supports: \
* Basic operations (`+`, `-`, `*`, `/`, `^`/`**`)\
* Functions (`ln`, `log`, `sqrt`/`√`)\
* Symbols (`e`, `π`, `i`, `φ`)\
* Factorial (`!`)

eval.error = {formulae} is too simple.
eval.error.KeyError = I know this {0}! {1}
eval.error.TimeoutError = I'm dying: {0} ** {1}
eval.error.ArithmeticError = What is {e}?
eval.error.ValueError = Your formula was too short.
eval.syntax = !eval <expressionformula>

# plot
plot.aliases = [linear]
plot.desc = Plots the formula `y = <m>x + <c>`, where m is slope and c is the y-intercept. \
The plot will be ranging from <min> to <max>.

plot.error = Unable to plot `y = {m}x + {c}`, ranging from {min_} to {max_}.
plot.syntax = !plot <m> <c> <min> <max>

# prime
prime.aliases = [pfac]
prime.desc = Find <n>'s composite factorization.
prime.error = Cannot factor {n}.
prime.syntax = !prime <n>

# factor
factor.aliases = [fac]
factor.desc = Find all numbers that have a lcm of <n> with <n>.
factor.error = Cannot {n}.
factor.syntax = !factor <n>